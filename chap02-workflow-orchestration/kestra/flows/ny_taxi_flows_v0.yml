id: ny_taxi_flows_v0
namespace: zoomcamp_v0
description: |
  The CSV Data used in the course: https://github.com/DataTalksClub/nyc-tlc-data/releases

inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: [yellow, green]
    defaults: yellow

  - id: year
    type: SELECT
    displayName: Select year
    values: ["2019", "2020"]
    defaults: "2019"

  - id: month
    type: SELECT
    displayName: Select month
    values: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
    defaults: "01"

variables:
  filename: "{{inputs.taxi}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  file: "{{vars.filename}}"
  staging_table: "public.{{inputs.taxi}}_tripdata_staging"
  table: "public.{{inputs.taxi}}_tripdata"
  data: "{{outputs.extract.outputFiles[render(vars.file)]}}"

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://postgres_zoomcamp:5432/zoomcamp
      username: zoomcamp
      password: zoomcamp

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "{{render(vars.file)}}" 
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}
      - ls -l {{render(vars.file)}}

  - id: create_main_table
    type: io.kestra.plugin.core.flow.Switch
    value: "{{ inputs.taxi }}"
    cases:
      yellow:
        - id: create_yellow_main
          type: io.kestra.plugin.jdbc.postgresql.Queries
          sql: |
            CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
                VendorID TEXT,
                tpep_pickup_datetime TIMESTAMP,
                tpep_dropoff_datetime TIMESTAMP,
                passenger_count INTEGER,
                trip_distance NUMERIC,
                RatecodeID INTEGER,
                store_and_fwd_flag TEXT,
                PULocationID INTEGER,
                DOLocationID INTEGER,
                payment_type INTEGER,
                fare_amount NUMERIC,
                extra NUMERIC,
                mta_tax NUMERIC,
                tip_amount NUMERIC,
                tolls_amount NUMERIC,
                improvement_surcharge NUMERIC,
                total_amount NUMERIC,
                congestion_surcharge NUMERIC,
                unique_row_id TEXT,
                filename TEXT
            );
      green:
        - id: create_green_main
          type: io.kestra.plugin.jdbc.postgresql.Queries
          sql: |
            CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
                VendorID TEXT,
                lpep_pickup_datetime TIMESTAMP,
                lpep_dropoff_datetime TIMESTAMP,
                store_and_fwd_flag TEXT,
                RatecodeID INTEGER,
                PULocationID INTEGER,
                DOLocationID INTEGER,
                passenger_count INTEGER,
                trip_distance NUMERIC,
                fare_amount NUMERIC,
                extra NUMERIC,
                mta_tax NUMERIC,
                tip_amount NUMERIC,
                tolls_amount NUMERIC,
                ehail_fee NUMERIC,
                improvement_surcharge NUMERIC,
                total_amount NUMERIC,
                payment_type INTEGER,
                trip_type INTEGER,
                congestion_surcharge NUMERIC,
                unique_row_id TEXT,
                filename TEXT
            );

  - id: drop_staging_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      DROP TABLE IF EXISTS {{render(vars.staging_table)}};

  - id: create_staging_table
    type: io.kestra.plugin.core.flow.Switch
    value: "{{ inputs.taxi }}"
    cases:
      yellow:
        - id: create_yellow_staging
          type: io.kestra.plugin.jdbc.postgresql.Queries
          sql: |
            CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
                VendorID TEXT,
                tpep_pickup_datetime TIMESTAMP,
                tpep_dropoff_datetime TIMESTAMP,
                passenger_count INTEGER,
                trip_distance NUMERIC,
                RatecodeID INTEGER,
                store_and_fwd_flag TEXT,
                PULocationID INTEGER,
                DOLocationID INTEGER,
                payment_type INTEGER,
                fare_amount NUMERIC,
                extra NUMERIC,
                mta_tax NUMERIC,
                tip_amount NUMERIC,
                tolls_amount NUMERIC,
                improvement_surcharge NUMERIC,
                total_amount NUMERIC,
                congestion_surcharge NUMERIC,
                unique_row_id TEXT,
                filename TEXT
            );
      green:
        - id: create_green_staging
          type: io.kestra.plugin.jdbc.postgresql.Queries
          sql: |
            CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
                VendorID TEXT,
                lpep_pickup_datetime TIMESTAMP,
                lpep_dropoff_datetime TIMESTAMP,
                store_and_fwd_flag TEXT,
                RatecodeID INTEGER,
                PULocationID INTEGER,
                DOLocationID INTEGER,
                passenger_count INTEGER,
                trip_distance NUMERIC,
                fare_amount NUMERIC,
                extra NUMERIC,
                mta_tax NUMERIC,
                tip_amount NUMERIC,
                tolls_amount NUMERIC,
                ehail_fee NUMERIC,
                improvement_surcharge NUMERIC,
                total_amount NUMERIC,
                payment_type INTEGER,
                trip_type INTEGER,
                congestion_surcharge NUMERIC,
                unique_row_id TEXT,
                filename TEXT
            );

  - id: truncate_staging
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      TRUNCATE TABLE {{render(vars.staging_table)}};

  - id: copy_to_staging
    type: io.kestra.plugin.core.flow.Switch
    value: "{{ inputs.taxi }}"
    cases:
      yellow:
        - id: yellow_copy
          type: io.kestra.plugin.jdbc.postgresql.CopyIn
          format: CSV
          from: "{{ render(vars.data) }}"
          table: "{{ render(vars.staging_table) }}"
          header: true
          columns:
            - VendorID
            - tpep_pickup_datetime
            - tpep_dropoff_datetime
            - passenger_count
            - trip_distance
            - RatecodeID
            - store_and_fwd_flag
            - PULocationID
            - DOLocationID
            - payment_type
            - fare_amount
            - extra
            - mta_tax
            - tip_amount
            - tolls_amount
            - improvement_surcharge
            - total_amount
            - congestion_surcharge

      green:
        - id: green_copy
          type: io.kestra.plugin.jdbc.postgresql.CopyIn
          format: CSV
          from: "{{ render(vars.data) }}"
          table: "{{ render(vars.staging_table) }}"
          header: true
          columns:
            - VendorID
            - lpep_pickup_datetime
            - lpep_dropoff_datetime
            - store_and_fwd_flag
            - RatecodeID
            - PULocationID
            - DOLocationID
            - passenger_count
            - trip_distance
            - fare_amount
            - extra
            - mta_tax
            - tip_amount
            - tolls_amount
            - ehail_fee
            - improvement_surcharge
            - total_amount
            - payment_type
            - trip_type
            - congestion_surcharge

  - id: enrich_staging
    type: io.kestra.plugin.core.flow.Switch
    value: "{{ inputs.taxi }}"
    cases:
      yellow:
        - id: yellow_update
          type: io.kestra.plugin.jdbc.postgresql.Queries
          sql: |
            UPDATE {{render(vars.staging_table)}}
            SET
              unique_row_id = md5(
                COALESCE(CAST(VendorID AS text), '') ||
                COALESCE(CAST(tpep_pickup_datetime AS text), '') ||
                COALESCE(CAST(tpep_dropoff_datetime AS text), '') ||
                COALESCE(CAST(PULocationID AS text), '') ||
                COALESCE(CAST(DOLocationID AS text), '') ||
                COALESCE(CAST(fare_amount AS text), '') ||
                COALESCE(CAST(trip_distance AS text), '')
              ),
              filename = '{{render(vars.file)}}';

      green:
        - id: green_update
          type: io.kestra.plugin.jdbc.postgresql.Queries
          sql: |
            UPDATE {{render(vars.staging_table)}}
            SET
              unique_row_id = md5(
                COALESCE(CAST(VendorID AS text), '') ||
                COALESCE(CAST(lpep_pickup_datetime AS text), '') ||
                COALESCE(CAST(lpep_dropoff_datetime AS text), '') ||
                COALESCE(CAST(PULocationID AS text), '') ||
                COALESCE(CAST(DOLocationID AS text), '') ||
                COALESCE(CAST(fare_amount AS text), '') ||
                COALESCE(CAST(trip_distance AS text), '')
              ),
              filename = '{{render(vars.file)}}';

  - id: merge_into_main_table
    type: io.kestra.plugin.core.flow.Switch
    value: "{{ inputs.taxi }}"
    cases:
      yellow:
        - id: yellow_merge
          type: io.kestra.plugin.jdbc.postgresql.Queries
          sql: |
            MERGE INTO {{render(vars.table)}} AS T
            USING {{render(vars.staging_table)}} AS S
            ON T.unique_row_id = S.unique_row_id
            WHEN NOT MATCHED THEN
              INSERT (
                unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime,
                passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID,
                DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
                improvement_surcharge, total_amount, congestion_surcharge
              )
              VALUES (
                S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime,
                S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID,
                S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount,
                S.improvement_surcharge, S.total_amount, S.congestion_surcharge
              );

      green:
        - id: green_merge
          type: io.kestra.plugin.jdbc.postgresql.Queries
          sql: |
            MERGE INTO {{render(vars.table)}} AS T
            USING {{render(vars.staging_table)}} AS S
            ON T.unique_row_id = S.unique_row_id
            WHEN NOT MATCHED THEN
              INSERT (
                unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime,
                store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count,
                trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee,
                improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge
              )
              VALUES (
                S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime,
                S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count,
                S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee,
                S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge
              );

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: This will remove output files. Disable for debugging if needed.
